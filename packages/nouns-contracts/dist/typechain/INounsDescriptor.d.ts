/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface INounsDescriptorInterface extends ethers.utils.Interface {
  functions: {
    "accessories(uint256)": FunctionFragment;
    "accessoryCount()": FunctionFragment;
    "addAccessory(bytes)": FunctionFragment;
    "addBackground(string)": FunctionFragment;
    "addBody(bytes)": FunctionFragment;
    "addColorToPalette(uint8,string)": FunctionFragment;
    "addGlasses(bytes)": FunctionFragment;
    "addHead(bytes)": FunctionFragment;
    "addManyAccessories(bytes[])": FunctionFragment;
    "addManyBackgrounds(string[])": FunctionFragment;
    "addManyBodies(bytes[])": FunctionFragment;
    "addManyColorsToPalette(uint8,string[])": FunctionFragment;
    "addManyGlasses(bytes[])": FunctionFragment;
    "addManyHeads(bytes[])": FunctionFragment;
    "arePartsLocked()": FunctionFragment;
    "backgroundCount()": FunctionFragment;
    "backgrounds(uint256)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "bodies(uint256)": FunctionFragment;
    "bodyCount()": FunctionFragment;
    "dataURI(uint256,tuple)": FunctionFragment;
    "generateSVGImage(tuple)": FunctionFragment;
    "genericDataURI(string,string,tuple)": FunctionFragment;
    "glasses(uint256)": FunctionFragment;
    "glassesCount()": FunctionFragment;
    "headCount()": FunctionFragment;
    "heads(uint256)": FunctionFragment;
    "isDataURIEnabled()": FunctionFragment;
    "lockParts()": FunctionFragment;
    "palettes(uint8,uint256)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "toggleDataURIEnabled()": FunctionFragment;
    "tokenURI(uint256,tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accessories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accessoryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAccessory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBackground",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addBody", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "addColorToPalette",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addGlasses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "addHead", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "addManyAccessories",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyBackgrounds",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyBodies",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyColorsToPalette",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyGlasses",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyHeads",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "arePartsLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backgroundCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backgrounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bodies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bodyCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dataURI",
    values: [
      BigNumberish,
      {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSVGImage",
    values: [
      {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "genericDataURI",
    values: [
      string,
      string,
      {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "glasses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "glassesCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "headCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "heads", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "isDataURIEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockParts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "palettes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "toggleDataURIEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [
      BigNumberish,
      {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "accessories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessoryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAccessory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBackground",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBody", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addColorToPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addGlasses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addHead", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addManyAccessories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyBackgrounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyBodies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyColorsToPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyGlasses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyHeads",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arePartsLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgroundCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgrounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bodies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bodyCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateSVGImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genericDataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glasses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "glassesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "headCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "heads", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDataURIEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockParts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "palettes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleDataURIEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;

  events: {
    "BaseURIUpdated(string)": EventFragment;
    "DataURIToggled(bool)": EventFragment;
    "PartsLocked()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataURIToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartsLocked"): EventFragment;
}

export class INounsDescriptor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INounsDescriptorInterface;

  functions: {
    accessories(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "accessories(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    accessoryCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "accessoryCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAccessory(
      accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addAccessory(bytes)"(
      accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBackground(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addBackground(string)"(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBody(
      body: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addBody(bytes)"(
      body: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addColorToPalette(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addColorToPalette(uint8,string)"(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addGlasses(
      glasses: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addGlasses(bytes)"(
      glasses: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addHead(
      head: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addHead(bytes)"(
      head: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyAccessories(
      accessories: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyAccessories(bytes[])"(
      accessories: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyBackgrounds(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyBackgrounds(string[])"(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyBodies(
      bodies: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyBodies(bytes[])"(
      bodies: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyGlasses(
      glasses: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyGlasses(bytes[])"(
      glasses: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyHeads(
      heads: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyHeads(bytes[])"(
      heads: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arePartsLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "arePartsLocked()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    backgroundCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "backgroundCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    backgrounds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "backgrounds(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    baseURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "baseURI()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bodies(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "bodies(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bodyCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bodyCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    dataURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "dataURI(uint256,tuple)"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "generateSVGImage(tuple)"(
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    genericDataURI(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "genericDataURI(string,string,tuple)"(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    glasses(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "glasses(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    glassesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "glassesCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    headCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "headCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    heads(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "heads(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isDataURIEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "isDataURIEnabled()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockParts()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    palettes(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "palettes(uint8,uint256)"(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleDataURIEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleDataURIEnabled()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256,tuple)"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  accessories(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "accessories(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  accessoryCount(overrides?: CallOverrides): Promise<BigNumber>;

  "accessoryCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  addAccessory(
    accessory: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addAccessory(bytes)"(
    accessory: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBackground(
    background: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addBackground(string)"(
    background: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBody(
    body: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addBody(bytes)"(
    body: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addColorToPalette(
    paletteIndex: BigNumberish,
    color: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addColorToPalette(uint8,string)"(
    paletteIndex: BigNumberish,
    color: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addGlasses(
    glasses: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addGlasses(bytes)"(
    glasses: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addHead(
    head: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addHead(bytes)"(
    head: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyAccessories(
    accessories: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyAccessories(bytes[])"(
    accessories: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyBackgrounds(
    backgrounds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyBackgrounds(string[])"(
    backgrounds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyBodies(
    bodies: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyBodies(bytes[])"(
    bodies: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyColorsToPalette(
    paletteIndex: BigNumberish,
    newColors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyColorsToPalette(uint8,string[])"(
    paletteIndex: BigNumberish,
    newColors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyGlasses(
    glasses: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyGlasses(bytes[])"(
    glasses: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyHeads(
    heads: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyHeads(bytes[])"(
    heads: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arePartsLocked(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "arePartsLocked()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

  "backgroundCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  backgrounds(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "backgrounds(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  baseURI(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "baseURI()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bodies(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "bodies(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  bodyCount(overrides?: CallOverrides): Promise<BigNumber>;

  "bodyCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  dataURI(
    tokenId: BigNumberish,
    seed: {
      background: BigNumberish;
      body: BigNumberish;
      accessory: BigNumberish;
      head: BigNumberish;
      glasses: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "dataURI(uint256,tuple)"(
    tokenId: BigNumberish,
    seed: {
      background: BigNumberish;
      body: BigNumberish;
      accessory: BigNumberish;
      head: BigNumberish;
      glasses: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  generateSVGImage(
    seed: {
      background: BigNumberish;
      body: BigNumberish;
      accessory: BigNumberish;
      head: BigNumberish;
      glasses: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "generateSVGImage(tuple)"(
    seed: {
      background: BigNumberish;
      body: BigNumberish;
      accessory: BigNumberish;
      head: BigNumberish;
      glasses: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  genericDataURI(
    name: string,
    description: string,
    seed: {
      background: BigNumberish;
      body: BigNumberish;
      accessory: BigNumberish;
      head: BigNumberish;
      glasses: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "genericDataURI(string,string,tuple)"(
    name: string,
    description: string,
    seed: {
      background: BigNumberish;
      body: BigNumberish;
      accessory: BigNumberish;
      head: BigNumberish;
      glasses: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  glasses(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "glasses(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  glassesCount(overrides?: CallOverrides): Promise<BigNumber>;

  "glassesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  headCount(overrides?: CallOverrides): Promise<BigNumber>;

  "headCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  heads(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "heads(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isDataURIEnabled(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "isDataURIEnabled()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockParts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockParts()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  palettes(
    paletteIndex: BigNumberish,
    colorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "palettes(uint8,uint256)"(
    paletteIndex: BigNumberish,
    colorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setBaseURI(
    baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBaseURI(string)"(
    baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleDataURIEnabled(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleDataURIEnabled()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenURI(
    tokenId: BigNumberish,
    seed: {
      background: BigNumberish;
      body: BigNumberish;
      accessory: BigNumberish;
      head: BigNumberish;
      glasses: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenURI(uint256,tuple)"(
    tokenId: BigNumberish,
    seed: {
      background: BigNumberish;
      body: BigNumberish;
      accessory: BigNumberish;
      head: BigNumberish;
      glasses: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    accessories(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "accessories(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    accessoryCount(overrides?: CallOverrides): Promise<BigNumber>;

    "accessoryCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAccessory(
      accessory: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAccessory(bytes)"(
      accessory: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addBackground(background: string, overrides?: CallOverrides): Promise<void>;

    "addBackground(string)"(
      background: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addBody(body: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addBody(bytes)"(body: BytesLike, overrides?: CallOverrides): Promise<void>;

    addColorToPalette(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addColorToPalette(uint8,string)"(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addGlasses(glasses: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addGlasses(bytes)"(
      glasses: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addHead(head: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addHead(bytes)"(head: BytesLike, overrides?: CallOverrides): Promise<void>;

    addManyAccessories(
      accessories: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyAccessories(bytes[])"(
      accessories: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyBackgrounds(
      backgrounds: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyBackgrounds(string[])"(
      backgrounds: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyBodies(
      bodies: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyBodies(bytes[])"(
      bodies: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyGlasses(
      glasses: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyGlasses(bytes[])"(
      glasses: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyHeads(heads: BytesLike[], overrides?: CallOverrides): Promise<void>;

    "addManyHeads(bytes[])"(
      heads: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    arePartsLocked(overrides?: CallOverrides): Promise<boolean>;

    "arePartsLocked()"(overrides?: CallOverrides): Promise<boolean>;

    backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

    "backgroundCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    backgrounds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "backgrounds(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    "baseURI()"(overrides?: CallOverrides): Promise<string>;

    bodies(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "bodies(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    bodyCount(overrides?: CallOverrides): Promise<BigNumber>;

    "bodyCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    dataURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "dataURI(uint256,tuple)"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "generateSVGImage(tuple)"(
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    genericDataURI(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "genericDataURI(string,string,tuple)"(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    glasses(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "glasses(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    glassesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "glassesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    headCount(overrides?: CallOverrides): Promise<BigNumber>;

    "headCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    heads(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "heads(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isDataURIEnabled(overrides?: CallOverrides): Promise<boolean>;

    "isDataURIEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    lockParts(overrides?: CallOverrides): Promise<void>;

    "lockParts()"(overrides?: CallOverrides): Promise<void>;

    palettes(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "palettes(uint8,uint256)"(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setBaseURI(baseURI: string, overrides?: CallOverrides): Promise<void>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleDataURIEnabled(overrides?: CallOverrides): Promise<void>;

    "toggleDataURIEnabled()"(overrides?: CallOverrides): Promise<void>;

    tokenURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(uint256,tuple)"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    BaseURIUpdated(
      baseURI: null
    ): TypedEventFilter<[string], { baseURI: string }>;

    DataURIToggled(
      enabled: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    PartsLocked(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    accessories(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accessories(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accessoryCount(overrides?: CallOverrides): Promise<BigNumber>;

    "accessoryCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAccessory(
      accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addAccessory(bytes)"(
      accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBackground(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addBackground(string)"(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBody(
      body: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addBody(bytes)"(
      body: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addColorToPalette(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addColorToPalette(uint8,string)"(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addGlasses(
      glasses: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addGlasses(bytes)"(
      glasses: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addHead(
      head: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addHead(bytes)"(
      head: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyAccessories(
      accessories: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyAccessories(bytes[])"(
      accessories: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyBackgrounds(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyBackgrounds(string[])"(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyBodies(
      bodies: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyBodies(bytes[])"(
      bodies: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyGlasses(
      glasses: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyGlasses(bytes[])"(
      glasses: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyHeads(
      heads: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyHeads(bytes[])"(
      heads: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arePartsLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "arePartsLocked()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

    "backgroundCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    backgrounds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "backgrounds(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "baseURI()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bodies(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "bodies(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bodyCount(overrides?: CallOverrides): Promise<BigNumber>;

    "bodyCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    dataURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dataURI(uint256,tuple)"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateSVGImage(tuple)"(
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genericDataURI(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "genericDataURI(string,string,tuple)"(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    glasses(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "glasses(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    glassesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "glassesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    headCount(overrides?: CallOverrides): Promise<BigNumber>;

    "headCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    heads(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "heads(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDataURIEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "isDataURIEnabled()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockParts()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    palettes(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "palettes(uint8,uint256)"(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleDataURIEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleDataURIEnabled()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256,tuple)"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accessories(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accessories(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accessoryCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accessoryCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAccessory(
      accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addAccessory(bytes)"(
      accessory: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBackground(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addBackground(string)"(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBody(
      body: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addBody(bytes)"(
      body: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addColorToPalette(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addColorToPalette(uint8,string)"(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addGlasses(
      glasses: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addGlasses(bytes)"(
      glasses: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addHead(
      head: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addHead(bytes)"(
      head: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyAccessories(
      accessories: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyAccessories(bytes[])"(
      accessories: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyBackgrounds(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyBackgrounds(string[])"(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyBodies(
      bodies: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyBodies(bytes[])"(
      bodies: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyGlasses(
      glasses: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyGlasses(bytes[])"(
      glasses: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyHeads(
      heads: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyHeads(bytes[])"(
      heads: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arePartsLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "arePartsLocked()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    backgroundCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "backgroundCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    backgrounds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "backgrounds(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "baseURI()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bodies(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bodies(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bodyCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bodyCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dataURI(uint256,tuple)"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateSVGImage(tuple)"(
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genericDataURI(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "genericDataURI(string,string,tuple)"(
      name: string,
      description: string,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    glasses(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "glasses(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    glassesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "glassesCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    headCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "headCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    heads(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "heads(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDataURIEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "isDataURIEnabled()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockParts()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    palettes(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "palettes(uint8,uint256)"(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleDataURIEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleDataURIEnabled()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256,tuple)"(
      tokenId: BigNumberish,
      seed: {
        background: BigNumberish;
        body: BigNumberish;
        accessory: BigNumberish;
        head: BigNumberish;
        glasses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
